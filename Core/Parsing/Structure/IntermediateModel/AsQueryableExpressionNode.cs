using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using Remotion.Linq.Utilities;
using Remotion.Utilities;

namespace Remotion.Linq.Parsing.Structure.IntermediateModel
{
  /// <summary>
  /// Represents a <see cref="MethodCallExpression"/> for <see cref="Queryable.AsQueryable{TSource}"/> or <see cref="Queryable.AsQueryable"/>.
  /// It is generated by <see cref="ExpressionTreeParser"/> when an <see cref="Expression"/> tree is parsed.
  /// When this node is used, it will not modify the <see cref="QueryModel"/>, i.e. the call to <see cref="Queryable.AsQueryable{TSource}"/> 
  /// will be removed given how it is transparent to the process of executing the query.
  /// </summary>
  public sealed class AsQueryableExpressionNode : MethodCallExpressionNodeBase
  {
    public static IEnumerable<MethodInfo> GetSupportedMethods ()
    {
      return ReflectionUtility.EnumerableAndQueryableMethods.WhereNameMatches ("AsQueryable");
    }

    public AsQueryableExpressionNode (MethodCallExpressionParseInfo parseInfo)
      : base (parseInfo)
    {
    }

    public override Expression Resolve (ParameterExpression inputParameter, Expression expressionToBeResolved, ClauseGenerationContext clauseGenerationContext)
    {
      ArgumentUtility.CheckNotNull ("inputParameter", inputParameter);
      ArgumentUtility.CheckNotNull ("expressionToBeResolved", expressionToBeResolved);

      // pass on expression to previous node
      return Source.Resolve (inputParameter, expressionToBeResolved, clauseGenerationContext);
    }

    protected override void ApplyNodeSpecificSemantics (QueryModel queryModel, ClauseGenerationContext clauseGenerationContext)
    {
      // don't change query model
    }
  }
}